package basic;

import com.ftn.sbnz.model.Filters;
import com.ftn.sbnz.model.RecommendedArticleDTO;
import com.ftn.sbnz.model.articles.Article;
import com.ftn.sbnz.model.sport.Sport;
import com.ftn.sbnz.model.sport.SportOrientiringType;
import com.ftn.sbnz.model.articles.BigCramponOrientiringShoe;
import com.ftn.sbnz.model.articles.TypeOfOrientiringGear;
import com.ftn.sbnz.model.articles.OrientiringGear;
import com.ftn.sbnz.model.sport.SportLevel;
import com.ftn.sbnz.model.articles.Sweatpants;
import com.ftn.sbnz.model.articles.SweatpantsType;
import com.ftn.sbnz.model.articles.NoCramponOrientiringShoe;
import java.util.Set;

global Set<RecommendedArticleDTO> recommendations;

rule "Recommend a sports compass if they participate in orienteering"
salience 100
when
    $filters: Filters(sport == Sport.Orijentiring)
    $article: Article()
    $busola: OrientiringGear(type == TypeOfOrientiringGear.Busola) from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("sports compass");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend Shoes with crampons if they haven't chosen the type of race."
salience 100
when
    $filters: Filters(sport == Sport.Orijentiring, typeOfRace == null)
    $article: Article()
    $patike: BigCramponOrientiringShoe() from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Shoes with crampons");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend Shoes without crampons if they haven't chosen the type of race"
salience 100
when
    $filters: Filters(sport == Sport.Orijentiring, typeOfRace == null)
    $article: Article()
    $patike: NoCramponOrientiringShoe() from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Shoes without crampons");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend shoes with big crampons if they participate in orienteering and the race is a forest sprint"
salience 100
when
    $filters: Filters(sport == Sport.Orijentiring, typeOfRace == SportOrientiringType.SumskaSprint)
    $article: Article()
    $patike: BigCramponOrientiringShoe() from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Shoes with crampons");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end


rule "Recommend shoes with big crampons if they participate in orienteering and the race is a forest long"
salience 100
when
    $filters: Filters(sport == Sport.Orijentiring, typeOfRace == SportOrientiringType.SumskaDuga)
    $article: Article()
    $patike: BigCramponOrientiringShoe() from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Shoes with big crampons");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend running shoes if they participate in orienteering and the race is urban"
salience 100
when
    $filters: Filters(sport == Sport.Orijentiring, typeOfRace == SportOrientiringType.GradskaSprint)
    $article: Article()
    $patike: NoCramponOrientiringShoe() from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Running shoes");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend shorts if they participate in orienteering and the race is urban"
salience 100
when
    $filters: Filters(sport == Sport.Orijentiring, typeOfRace == SportOrientiringType.GradskaSprint)
    $article: Article()
    $Sweatpants: Sweatpants(type == SweatpantsType.Sorc) from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Shorts");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend half sweatpants if they participate in orienteering and the race is a long forest race."
salience 100
when
    $filters: Filters(sport == Sport.Orijentiring, typeOfRace == SportOrientiringType.SumskaDuga)
    $article: Article()
    $Sweatpants: Sweatpants(type == SweatpantsType.Poludugacko) from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Half sweatpants");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend sweatpants if they participate in orienteering and the race is a long forest race"
salience 100
when
    $filters: Filters(sport == Sport.Orijentiring, typeOfRace == SportOrientiringType.SumskaDuga)
    $article: Article()
    $Sweatpants: Sweatpants(type == SweatpantsType.Dugacko) from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Sweatpants");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend half sweatpants if they participate in orienteering and the race is a forest sprint."
salience 100
when
    $filters: Filters(sport == Sport.Orijentiring, typeOfRace == SportOrientiringType.SumskaSprint)
    $article: Article()
    $Sweatpants: Sweatpants(type == SweatpantsType.Poludugacko) from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Half sweatpants");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend sweatpants if they participate in orienteering and the race is a forest sprint"
salience 100
when
    $filters: Filters(sport == Sport.Orijentiring, typeOfRace == SportOrientiringType.SumskaSprint)
    $article: Article()
    $Sweatpants: Sweatpants(type == SweatpantsType.Dugacko) from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Sweatpants");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend gaiters if they participate in orienteering and the race is a forest sprint"
salience 100
when
    $filters: Filters(sport == Sport.Orijentiring, typeOfRace == SportOrientiringType.SumskaSprint)
    $article: Article()
    $kamasne: OrientiringGear(type == TypeOfOrientiringGear.Kamasne) from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Gaiters");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend gaiters if they participate in orienteering and the race is a long forest race"
salience 100
when
    $filters: Filters(sport == Sport.Orijentiring, typeOfRace == SportOrientiringType.SumskaDuga)
    $article: Article()
    $kamasne: OrientiringGear(type == TypeOfOrientiringGear.Kamasne) from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Gaiters");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend orienteering glasses if they participate in orienteering and the race is not an urban sprint."
salience 100
when
    $filters: Filters(sport == Sport.Orijentiring, typeOfRace != SportOrientiringType.GradskaSprint)
    $article: Article()
    $naocare: OrientiringGear(type == TypeOfOrientiringGear.Naocare) from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Glasses");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend the slower SportIdent SI card if they are into orienteering professionally, a compass is recommended, and the race is a long forest one"
salience 10
when
    $filters: Filters(sport == Sport.Orijentiring, level == SportLevel.Pro,typeOfRace == SportOrientiringType.SumskaDuga )
    $article: Article()
    $e1: RecommendedArticleDTO()
    $busola: OrientiringGear(id == $e1.getId(), type== TypeOfOrientiringGear.Busola)
    $cip: OrientiringGear(type == TypeOfOrientiringGear.Cip, (name == "Sportident Card 8" || name == "SportIdent Card 9")) from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("SI card");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend the faster SportIdent SI card if they are into orienteering professionally, a compass is recommended, and the race is a forest sprint."
salience 10
when
    $filters: Filters(sport == Sport.Orijentiring, level == SportLevel.Pro,typeOfRace == SportOrientiringType.SumskaSprint )
    $article: Article()
    $e1: RecommendedArticleDTO()
    $busola: OrientiringGear(id == $e1.getId(), type== TypeOfOrientiringGear.Busola)
    $cip: OrientiringGear(type == TypeOfOrientiringGear.Cip, (name == "Sportident Active Card SIAC Lynx" || name == "Sportident Active Card SIAC Red")) from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("SI card");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend the faster SportIdent SI card if they are into orienteering professionally, a compass is recommended, and the race is an urban sprint"
salience 10
when
    $filters: Filters(sport == Sport.Orijentiring, level == SportLevel.Pro,typeOfRace == SportOrientiringType.GradskaSprint )
    $article: Article()
    $e1: RecommendedArticleDTO()
    $busola: OrientiringGear(id == $e1.getId(), type== TypeOfOrientiringGear.Busola)
    $cip: OrientiringGear(type == TypeOfOrientiringGear.Cip, (name == "Sportident Active Card SIAC Lynx" || name == "Sportident Active Card SIAC Red")) from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("SI card");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend a lanyard for attaching the SI card if an SI card is recommended and the race is a forest sprint."
salience 9
when
    $filters: Filters(typeOfRace == SportOrientiringType.SumskaSprint )
    $article: Article()
    $e1: RecommendedArticleDTO()
    $cip: OrientiringGear(id == $e1.getId(), type== TypeOfOrientiringGear.Cip)
    $kanap: OrientiringGear(type == TypeOfOrientiringGear.KanapZaCip) from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("lanyard");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend a lanyard for attaching the SI card if an SI card is recommended and the race is a long forest race."
salience 9
when
    $filters: Filters(typeOfRace == SportOrientiringType.SumskaDuga )
    $article: Article()
    $e1: RecommendedArticleDTO()
    $cip: OrientiringGear(id == $e1.getId(), type== TypeOfOrientiringGear.Cip)
    $kanap: OrientiringGear(type == TypeOfOrientiringGear.KanapZaCip) from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("lanyard");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end