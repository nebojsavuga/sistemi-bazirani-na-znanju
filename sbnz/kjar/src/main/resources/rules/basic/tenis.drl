package basic;

import com.ftn.sbnz.model.Filters;
import com.ftn.sbnz.model.RecommendedArticleDTO;
import com.ftn.sbnz.model.articles.Article;
import com.ftn.sbnz.model.sport.Sport;
import com.ftn.sbnz.model.sport.SportLevel;
import com.ftn.sbnz.model.sport.SportTenisField;
import com.ftn.sbnz.model.articles.TenisGear;
import com.ftn.sbnz.model.articles.Racket;
import com.ftn.sbnz.model.articles.TypeOfRacket;
import com.ftn.sbnz.model.articles.TypeOfRacketSpanning;
import com.ftn.sbnz.model.articles.TypeOfGear;
import com.ftn.sbnz.model.articles.TenisShoe;
import com.ftn.sbnz.model.articles.Sole;
import com.ftn.sbnz.model.articles.RacketString;
import com.ftn.sbnz.model.articles.Grip;
import com.ftn.sbnz.model.users.Gender;
import com.ftn.sbnz.model.articles.ArticleGenderType;
import com.ftn.sbnz.model.users.Injury;
import java.util.Set;
global List<Injury> injuries;

global Set<RecommendedArticleDTO> recommendations;


rule "Recommend tennis balls if they play tennis"
salience 100
when
    $filters: Filters(sport == Sport.Tenis)
    $article: Article()
    $loptice: TenisGear(gearType == TypeOfGear.Loptice) from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Tenis Balls");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend professional-grade tennis rackets with a stiff string bed if they are a tennis professional."
salience 100
when
    $filters: Filters(sport == Sport.Tenis, (level == SportLevel.Pro))
    $article: Article()
    $ewkwr: Racket(spanningType == TypeOfRacketSpanning.Tvrdo, type== TypeOfRacket.Profesionalni) from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Racket");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend all rackets if they play tennis and haven't chosen filters."
salience 100
when
    $filters: Filters(sport == Sport.Tenis, level == null, $myInj:injuries, height == null || height == 0)
    $article: Article()
    eval($myInj.isEmpty())
    $ewkwr: Racket() from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Racket");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "If they have elbow injuries and play tennis, recommend a racket lighter than 300g."
salience 100
when
    Filters(sport == Sport.Tenis, $addedInjuries: injuries)
    $article: Article()
    $reket: Racket(weight <= 300.0) from $article
    Injury(name == "Povreda lakta", $injuryId: id) from injuries
    eval($addedInjuries.contains($injuryId))
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Racket");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "If they have wrist injuries and play tennis, recommend a racket lighter than 300g with a soft string bed."
salience 100
when
    Filters(sport == Sport.Tenis, $addedInjuries: injuries)
    $article: Article()
    $reket: Racket(weight <= 300.0, spanningType == TypeOfRacketSpanning.Meko) from $article
    Injury(name == "Povreda rucnog zgloba", $injuryId: id) from injuries
    eval($addedInjuries.contains($injuryId))
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Racket");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend classic tennis rackets with a soft string bed if they play tennis and are an amateur or recreational player"
salience 100
when
    $filters: Filters(sport == Sport.Tenis, (level == SportLevel.Amater || level == SportLevel.Rekreativac))
    $article: Article()
    $reket: Racket((spanningType == TypeOfRacketSpanning.Meko || spanningType == TypeOfRacketSpanning.Tvrdo), type== TypeOfRacket.Klasik) from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Racket");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend tennis shoes with a flat sole if they want to play on hard courts"
salience 100
when
    $filters: Filters(sport == Sport.Tenis, typeOfField == SportTenisField.Beton)
    $article: Article()
    $patike: TenisShoe(sole == Sole.Ravan) from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Tenis Shoe");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule 
"Recommend tennis shoes with a herringbone sole if they want to play on clay courts"
salience 100
when
    $filters: Filters(sport == Sport.Tenis, typeOfField == SportTenisField.Sljaka)
    $article: Article()
    $patike: TenisShoe(sole == Sole.RibljaKost) from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Tenis Shoe");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend tennis shoes with crampons if they want to play on grass courts."
salience 100
when
    $filters: Filters(sport == Sport.Tenis, typeOfField == SportTenisField.Trava)
    $article: Article()
    $patike: TenisShoe(sole == Sole.Kramponi) from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Tenis Shoe");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end


rule "Recommend strings if a pro racket is recommended"
salience 10
when
    $article: Article()
    $e1: RecommendedArticleDTO()
    $racket: Racket(id == $e1.getId(), type== TypeOfRacket.Profesionalni)
    $zica: RacketString() from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendedArticle.setArticleType("Racket string");
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend a grip if a pro racket is recommended"
salience 10
when
    $article: Article()
    $e1: RecommendedArticleDTO()
    $racket: Racket(id == $e1.getId(), type== TypeOfRacket.Profesionalni)
    $grip: Grip() from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Grip");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend a vibrastop if strings are recommended"
salience 9
when
    $article: Article()
    $e1: RecommendedArticleDTO()
    $zica: RacketString(id == $e1.getId())
    $vibrastop: TenisGear(gearType == TypeOfGear.Vibrastop) from $article
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Vibrastop");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "Recommend Wilson hat if more than 4 Wilson items are recommended."
no-loop
salience 8
when
    $filters: Filters(sport == Sport.Tenis)
    $article: Article()
    $kacket: TenisGear(gearType == TypeOfGear.Kacket) from $article
    Number(intValue >= 4) from accumulate(
        $rc : RecommendedArticleDTO(brandName == "Wilson"),
        count($rc)
    )
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("hat");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
end

rule "If the user is male, exclude female items from the recommendations."
salience -200
when
    Filters(getGender() == Gender.Musko)
    $recommendedArticle: RecommendedArticleDTO($id: id) from recommendations
    $article: Article(id==$id, gender == ArticleGenderType.Female)
then
    recommendations.remove($recommendedArticle);
end

rule "If the user is female, exclude male items from the recommendations"
salience -200
when
    Filters(getGender() == Gender.Zensko)
    $recommendedArticle: RecommendedArticleDTO($id: id) from recommendations
    $article: Article(id==$id, gender == ArticleGenderType.Male)
then
    recommendations.remove($recommendedArticle);
end