package cep;

import com.ftn.sbnz.model.Filters;
import com.ftn.sbnz.model.RecommendedArticleDTO;
import com.ftn.sbnz.model.articles.Article;
import com.ftn.sbnz.model.articles.GrassFootbalShoe;
import com.ftn.sbnz.model.sport.Sport;
import com.ftn.sbnz.model.sport.SportLevel;
import com.ftn.sbnz.model.sport.SportTenisField;
import com.ftn.sbnz.model.articles.Ball;
import com.ftn.sbnz.model.articles.BallType;
import com.ftn.sbnz.model.articles.GearTypeFootball;
import com.ftn.sbnz.model.articles.FootballGear;
import com.ftn.sbnz.model.articles.FootbalShoeNoCrampons;
import com.ftn.sbnz.model.sport.SportFootballType;
import com.ftn.sbnz.model.events.Purchase;
import com.ftn.sbnz.model.articles.Rating;
import com.ftn.sbnz.model.articles.Barbel;
import com.ftn.sbnz.model.articles.BarbelType;
import com.ftn.sbnz.model.articles.Weight;
import com.ftn.sbnz.model.articles.WlTypeOfGear;
import com.ftn.sbnz.model.articles.WeightliftingGear;
import com.ftn.sbnz.model.sport.SportWeightliftingType;
import com.ftn.sbnz.model.articles.OrientiringGear;
import com.ftn.sbnz.model.articles.TypeOfOrientiringGear;
import com.ftn.sbnz.model.articles.Sweatpants;
import com.ftn.sbnz.model.articles.SweatpantsType;
import com.ftn.sbnz.model.articles.Racket;




import java.util.Set;
import java.util.List;

global Set<RecommendedArticleDTO> recommendations;

rule "If an item has been purchased in the last month, do not recommend it again"
salience -1000
when
    $article: RecommendedArticleDTO($id: id) from recommendations
    $purchase : Purchase(article.getId() == $id) over window:time(30d)
then
    recommendations.remove($article);
end

rule "If a brand has been rated below 3 for five or more times in the last year, do not recommend it"
salience -100
when
    $article: RecommendedArticleDTO($brand: brandName) from recommendations
    Number(intValue >= 5) from accumulate(
    $rating:Rating(article.getBrandName() == $brand, rating <= 3)
    over window: time(365d),
    count($rating)
)
then
    recommendations.remove($article);
end

rule "If they have purchased more than 4 20kg weight plates, offer an Olympic barbell"
salience 1000
when
    $article: Article()
    $proSipka: Barbel(type == BarbelType.Olimpijska) from $article
    $tezina: Weight($idWeight:id, weight > 19.9)
    Number(intValue >= 4) from accumulate(
    $purchase : Purchase(article.getId() == $idWeight)
    over window: time(365d),
    count($purchase)
)
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Olympic barbel");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
    
end

rule 
"If they have purchased more than 4 20kg weight plates and an Olympic barbell, and they are a powerlifter, offer them a weightlifting belt"
salience 100
when
    $filters: Filters(sport == Sport.DizanjeTegova, typeOfWeightlifting == SportWeightliftingType.Powerlifting)
    $article: Article()
    $kais: WeightliftingGear(type == WlTypeOfGear.Belt) from $article
    Barbel($idSipka:id, type == BarbelType.Olimpijska)
    Purchase(article.getId() == $idSipka)
    $tezina: Weight($idWeight:id, weight > 19.9)
    Number(intValue >= 4) from accumulate(
    $purchase : Purchase(article.getId() == $idWeight)
    over window: time(365d),
    count($purchase)
)
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Belt");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
    
end

rule "If they have purchased more than 4 20kg weight plates and an Olympic barbell, and they are a powerlifter, offer them knee wrap"
salience 100
when
    $filters: Filters(sport == Sport.DizanjeTegova, typeOfWeightlifting == SportWeightliftingType.Powerlifting)
    $article: Article()
    $kais: WeightliftingGear(type == WlTypeOfGear.KneeWrap) from $article
    Barbel($idSipka:id, type == BarbelType.Olimpijska)
    Purchase(article.getId() == $idSipka)
    $tezina: Weight($idWeight:id, weight > 19.9)
    Number(intValue >= 4) from accumulate(
    $purchase : Purchase(article.getId() == $idWeight)
    over window: time(365d),
    count($purchase)
)
then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("KneeWrap");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
    
end

rule "If they are into orienteering and have purchased mid-length pants in the last 6 months, recommend gaiters"
salience 100
when
    $filters: Filters(sport == Sport.Orijentiring)
    $article: Article()
    $kamasne: OrientiringGear(type == TypeOfOrientiringGear.Kamasne) from $article
    Sweatpants($idPoludugacke:id, type == SweatpantsType.Poludugacko)
    Purchase(article.getId() == $idPoludugacke)
    over window: time(182d)

then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Gaiters");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
    
end

rule "If they are into orienteering and have purchased gaiters in the last 6 months, recommend short socks."
salience 99
when
    $filters: Filters(sport == Sport.Orijentiring)
    $article: Article()
    $carape: OrientiringGear(type == TypeOfOrientiringGear.KratkeCarape) from $article
    OrientiringGear($idKamasne:id, type == TypeOfOrientiringGear.Kamasne)
    Purchase(article.getId() == $idKamasne)
    over window: time(182d)

then
    RecommendedArticleDTO recommendedArticle = new RecommendedArticleDTO();
    recommendedArticle.setName($article.getName());
    recommendedArticle.setPrice($article.getPrice());
    recommendedArticle.setId($article.getId());
    recommendedArticle.setBrandName($article.getBrandName());
    recommendedArticle.setArticleType("Short socks");
    recommendedArticle.setPathToImage($article.getPathToImage());
    recommendations.add(recommendedArticle);
    insert(recommendedArticle);
    
end

rule "If the average weight of purchased rackets in last year is higher than in the last 3 years, exclude rackets lighter than the lightest racket purchased in last 3 years from the recommendations"
salience -50
when
    $filters: Filters(sport == Sport.Tenis)
    
    $avgLastYear:Number() from accumulate(
    $purchase : Purchase(article instanceof Racket, $racket: article)
    over window: time(365d),
    average(((Racket) $purchase.getArticle()).getWeight())
)
    $avgLast3Year:Number() from accumulate(
    $purchase : Purchase(article instanceof Racket, $racket: article)
    over window: time(1095d),
      average(((Racket) $purchase.getArticle()).getWeight())
)   
    eval($avgLastYear.doubleValue() > ($avgLast3Year.doubleValue()))

    $minLast3Year:Number() from accumulate(
    $purchase : Purchase(article instanceof Racket, $racket: article)
    over window: time(1095d),
    min(((Racket) $purchase.getArticle()).getWeight()))

    Number(intValue >= 1) from accumulate(
    $purchase : Purchase(article instanceof Racket, $racket: article)
    over window: time(365d),
    count($purchase)
    )
    Number(intValue >= 3) from accumulate(
    $purchase : Purchase(article instanceof Racket, $racket: article)
    over window: time(1095d),
    count($purchase)
    )
    Racket($id: id, getWeight() < $minLast3Year.floatValue())
    $articleRec: RecommendedArticleDTO(id == $id) from recommendations


then
     recommendations.remove($articleRec);
     
end


